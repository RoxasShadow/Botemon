#!/usr/bin/env ruby
#encoding: utf-8
#--
# Copyright(C) 2013 Giovanni Capuano <webmaster@giovannicapuano.net>
#
# This file is part of Botémon.
#
# Botémon is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Botémon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Botémon.  If not, see <http://www.gnu.org/licenses/>.
#++

require 'botemon'

abort 'Usage: botemon <bot_name> <bot_password> <server> <channels>' if ARGV.length < 4

Cinch::Bot.new {
  configure do |c|
    c.nick     = ARGV[0]
    c.realname = ARGV[0]
    c.user     = ARGV[0]
    c.password = ARGV[1]
    c.server   = ARGV[2]
    c.channels = ARGV.drop(3).map { |c| "\##{c}" }
    
    c.plugins.plugins = [Cinch::Plugins::Login]
    c.plugins.options[Cinch::Plugins::Login] = { :password => ARGV[1] }
    
    @storage        = Storage.new './cache.db'
    @pokemon_trivia = nil
    @players        = []
    @trivia_owner   = ''
    @trivia_wrong   = 0
  end

  on :message, /^pkmn (.+)/ do |m, name|
    @storage = Storage.new('./cache.db') unless @storage
    
    name = Pokedex.id2name(name) if name.numeric?

    pokemon = Pokedex.get name, @storage
    m.reply pokemon ? "#{pokemon.to_s}\n#{pokemon.url}".split("\n").map { |l| Format(:red, l) }.join("\n") : 'Pokémon not found.'
  end

  on :message, /^moveset (.+) (.+)/ do |m, name, tier|
    name = Pokedex.id2name(name) if name.numeric?
    

    movesets = Movedex.get name, tier
    if movesets != nil || movesets.any?
      m.reply Format(:red, "--- #{movesets.first.pokemon} (#{movesets.first.tier}) ---")
      movesets.each { |moveset| m.reply Format(:red, " -- #{moveset.name} --\n#{moveset.to_s.split("\n").map { |l| Format(:red, l) }.join("\n")}\n") }
    else
      m.reply Format(:red, 'Moveset not found.')
    end
  end

  on :message, /^ability (.+)/ do |m, name|   
    ability = Abilitydex.get name
    if ability != nil
      m.reply Format(:red, "#{ability.to_s.split("\n").map { |l| Format(:red, l) }.join("\n")}")
    else
      m.reply Format(:red, 'Ability not found.')
    end
  end

  on :message, /^pktrivia$/ do |m|
    @storage = Storage.new('./cache.db') unless @storage
    
    if @pokemon_trivia != nil
      m.reply Format(:red, 'Other players are playing, wait until they finish.')
      m.reply Format(:red, @pokemon_trivia.clues)
    else
      @pokemon_trivia = Pokedex.get Pokedex.id2name(Random.new.rand(1..649)), @storage
      @trivia_owner   = m.user.nick
      @trivia_wrong   = 0
      
      m.reply @pokemon_trivia.clues.split("\n").map { |l| Format(:red, l) }.join("\n")
      m.reply Format(:red, "You have 3 chances to try to say which Pokémon is this!")
    end
  end

  on :message, /^pktrivia (.+)$/ do |m, pokemon|
    if @pokemon_trivia == nil
      m.reply Format(:red, 'You have to start the game before to play.')
    elsif pokemon.downcase == @pokemon_trivia.name.downcase
      m.reply Format(:red, "Right, #{m.user.nick} won!")
      @pokemon_trivia = nil
      @trivia_wrong   = 0
    else
      m.reply Format(:red, "Nope, #{m.user.nick} was wrong.")
      @trivia_wrong += 1
      if @trivia_wrong >= 3
        m.reply Format(:red, "No more chances. The secret Pokémon is #{@pokemon_trivia.name}!")
        @pokemon_trivia = nil
        @trivia_wrong   = 0
      end
    end
  end

  on :message, /^pkstop$/ do |m|
    if @pokemon_trivia != nil && (m.user.nick == 'mirkosp' || m.user.nick == 'RoxasShadowRS' || m.user.nick == @trivia_owner)
      @pokemon_trivia = nil
      @trivia_owner   = ''
      @trivia_wrong   = 0
      m.reply Format(:red, "Game aborted by #{m.user.nick}.")
    else
      m.reply Format(:red, "Only ops and the game luncher can stop the game. #{m.user.nick} GTFO.")
    end
  end

  on :message, /^pkdebug$/ do |m|
    if @pokemon_trivia == nil
      m.reply Format(:red, 'Game not started.')
    elsif m.user.nick == 'mirkosp' || m.user.nick == 'RoxasShadowRS'
      m.reply Format(:red, @pokemon_trivia.name)
    else
      m.reply Format(:red, 'VAI A ZAPPARE LA TERRA')
    end
  end

  on :message, /^pkversion$/ do |m|
    m.reply Format(:red, Botemon::version)
  end
}.start
