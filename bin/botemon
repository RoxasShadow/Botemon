#!/usr/bin/env ruby
#encoding: utf-8
#--
# Copyright(C) 2013 Giovanni Capuano <webmaster@giovannicapuano.net>
#
# This file is part of Botémon.
#
# Botémon is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Botémon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Botémon.  If not, see <http://www.gnu.org/licenses/>.
#++

require 'botemon'

abort 'Usage: botemon <bot_name> <bot_password> <server> <channels>' if ARGV.length < 4

Cinch::Bot.new {
  configure do |c|
    c.nick     = ARGV[0]
    c.realname = ARGV[0]
    c.user     = ARGV[0]
    c.password = ARGV[1]
    c.server   = ARGV[2]
    c.channels = ARGV.drop(3).map { |c| "\##{c}" }
    
    c.plugins.plugins = [Cinch::Plugins::Login]
    c.plugins.options[Cinch::Plugins::Login] = { :password => ARGV[1] }
    
    @storage        = Storage.new './cache.db'
    @pokemon_trivia = nil
    @players        = []
    @trivia_owner   = ''
    @trivia_wrong   = 0
  end

  on :message, /^pkmn (.+)/ do |m, name|
    @storage = Storage.new('./cache.db') unless @storage
    
    name = Smogon::Pokemon.id2name(name) if name.numeric?

    pokemon = Pokedex.get name.delete(?'), @storage
    m.reply pokemon ? "#{pokemon.to_s}\n#{pokemon.url}".split("\n").map { |l| Format(:red, l) }.join("\n") : Format(:red, 'Pokémon not found.')
  end

  on :message, /^ability (.+)/ do |m, name|   
    ability = Abilitydex.get name
    
    m.reply ability ? "#{ability.to_s}\n#{ability.url}".split("\n").map { |l| Format(:red, l) }.join("\n") : Format(:red, 'Ability not found.')
  end

  on :message, /^item (.+)/ do |m, name|   
    item = Itemdex.get name
    
    m.reply item ? "#{item.to_s}\n#{item.url}".split("\n").map { |l| Format(:red, l) }.join("\n") : Format(:red, 'Item not found.')
  end

  on :message, /^move (.+)/ do |m, name|
    move = Movedex.get name

    m.reply move ? "#{move.to_s}\n#{move.url}".split("\n").map { |l| Format(:red, l) }.join("\n") : Format(:red, 'Move not found.')
  end

  on :message, /^moveset (.+) (.+) (.+)/ do |m, name, tier, metagame|
    name = Smogon::Pokemon.id2name(name) if name.numeric?

    movesets = Movesetdex.get name.delete(?'), tier, (metagame.empty? ? 'bw' : metagame)
    if movesets != nil || movesets.any?
      m.reply Format(:red, "--- #{movesets.first.pokemon} (#{movesets.first.tier}) ---")
      movesets.each { |moveset| m.reply Format(:red, " -- #{moveset.name} --\n#{moveset.to_s.split("\n").map { |l| Format(:red, l) }.join("\n")}\n") }
    else
      m.reply Format(:red, 'Moveset not found.')
    end
  end

  on :message, /^pstats (.+) (.+) (.+) (.+)/ do |m, name, level, nature, evs|
    @storage = Storage.new('./cache.db') unless @storage

    name    = Smogon::Pokemon.id2name(name) if name.numeric?
    pokemon = Pokedex.get name.delete(?'), @storage

    hidden_values = evs.strip.split
    if hidden_values.length == 2
      evs = hidden_values[0].strip.split ?/
      ivs = hidden_values[1].strip.split ?/
    else
      evs = evs.strip.split ?/
      ivs = '31/31/31/31/31/31'.split ?/
    end

    m.reply "#{pokemon.name}: (#{pokemon.types.join(?-)}) #{pokemon.stats(level.to_i, nature, evs, ivs).join(?/)}"
  end

  on :message, /^pkrandom$/ do |m|
    @storage = Storage.new('./cache.db') unless @storage
    
    pokemon = Pokedex.get Smogon::Pokemon.id2name(Random.new.rand(1..649)).delete(?'), @storage
    m.reply pokemon ? "#{pokemon.to_s}\n#{pokemon.url}".split("\n").map { |l| Format(:red, l) }.join("\n") : Format(:red, 'Pokémon not found.')
  end

  on :message, /^pktrivia$/ do |m|
    @storage = Storage.new('./cache.db') unless @storage
    
    if @pokemon_trivia != nil
      m.reply Format(:red, 'Other players are playing, wait until they finish.')
      m.reply Format(:red, @pokemon_trivia.clues)
    else
      @pokemon_trivia = Pokedex.get Smogon::Pokemon.id2name(Random.new.rand(1..649)).delete(?'), @storage
      @trivia_owner   = m.user.nick
      @trivia_wrong   = 0
      
      if @pokemon_trivia
        m.reply @pokemon_trivia.clues.split("\n").map { |l| Format(:red, l) }.join("\n")
        m.reply Format(:red, 'You have 3 chances to try to say which Pokémon is this!')
      else
        m.reply Format(:red, 'An error is occurred searching the Pokémon.')
      end
    end
  end

  on :message, /^pktrivia (.+)/ do |m, pokemon|
    if @pokemon_trivia == nil
      m.reply Format(:red, 'You have to start the game before to play.')
    elsif pokemon.downcase == @pokemon_trivia.name.downcase
      m.reply Format(:red, "Right, #{m.user.nick} won!")
      @pokemon_trivia = nil
      @trivia_wrong   = 0
    else
      m.reply Format(:red, "Nope, #{m.user.nick} was wrong.")
      @trivia_wrong += 1
      if @trivia_wrong >= 3
        m.reply Format(:red, "No more chances. The secret Pokémon is #{@pokemon_trivia.name}!")
        @pokemon_trivia = nil
        @trivia_wrong   = 0
      end
    end
  end

  on :message, /^pkstop$/ do |m|
    if @pokemon_trivia != nil && (m.user.nick == 'mirkosp' || m.user.nick == 'RoxasShadowRS' || m.user.nick == @trivia_owner)
      @pokemon_trivia = nil
      @trivia_owner   = ''
      @trivia_wrong   = 0
      m.reply Format(:red, "Game aborted by #{m.user.nick}.")
    elsif @pokemon_trivia == nil
      m.reply Format(:red, 'Game not started.')
    else
      m.reply Format(:red, "Only ops and the game luncher can stop the game. #{m.user.nick} GTFO.")
    end
  end

  on :message, /^pkdebug$/ do |m|
    if @pokemon_trivia == nil
      m.reply Format(:red, 'Game not started.')
    elsif m.user.nick == 'mirkosp' || m.user.nick == 'RoxasShadowRS'
      m.reply Format(:red, @pokemon_trivia.name)
    else
      m.reply Format(:red, "GO TO DIG THE EARTH #{m.user.nick} ヽ(`Д´)ﾉ ┻━┻")
    end
  end
  
  on :message, /^pkcache$/ do |m|
    if m.user.nick.to_s.oper? c
      File.delete('./cache.db') if File.exists? './cache.db'
      
      @storage        = Storage.new './cache.db'
      @pokemon_trivia = nil
      @players        = []
      @trivia_owner   = ''
      @trivia_wrong   = 0
      
      m.reply Format(:red, 'Cache created.')
    else
      m.reply Format(:red, "Only ops can create the cache. #{m.user.nick} GTFO.")
    end
  end

  on :message, /^pkversion$/ do |m|
    m.reply Format(:red, "Botémon:    #{Botemon::version}")
    m.reply Format(:red, "Smogon-API: #{Smogon::version}")
  end

  on :message, /^pkhelp$/ do |m|
    m.reply Format(:red, "- pkmn    Bulbasaur / 1     ")
    m.reply Format(:red, "- ability Synchronize       ")
    m.reply Format(:red, "- move    Reflect           ")
    m.reply Format(:red, "- moveset Bulbasaur LC (BW) ")
    m.reply Format(:red, "- pkrandom, pktrivia, pkstop, pkversion ")
  end
}.start
